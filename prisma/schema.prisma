// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./sqlite.db"
// }

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id          Int       @id @default(autoincrement())
  username    String    @unique
  password    String?
  email       String?   @unique
  bio         String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  tweets      Tweet[]
  likes       Like[]
  comments    Comment[]
  @@index([id])
}

model Tweet {
  id          Int       @id @default(autoincrement())
  tweet       String
  views       Int       @default(0)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int       @map("user_id")
  likes       Like[]
  comments    Comment[]
  @@index([id])
}

model Like {
  createdAt   DateTime  @default(now()) @map("created_at")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int       @map("user_id")
  tweet       Tweet     @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId     Int       @map("tweet_id")
  @@id(name: "cid", [userId, tweetId])
}

model Comment {
  id          Int       @id @default(autoincrement())
  payload     String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int       @map("user_id")
  tweet       Tweet     @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId     Int       @map("tweet_id")
  @@index([id])
}
